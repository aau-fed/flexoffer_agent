package org.goflex.wp2.core.adapters;

/*-
 * #%L
 * ARROWHEAD::WP5::Core Data Structures
 * %%
 * Copyright (C) 2016 The ARROWHEAD Consortium
 * %%
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * #L%
 */


import javax.xml.bind.annotation.adapters.XmlAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * This file is needed to override the default Date serializer in Jettison - so that the Date
 * in UTC with a time zone is correctly generated.
 *
 * @author Laurynas
 */
@XmlJavaTypeAdapter(value = DateAdapter.class, type = Date.class)

public class DateAdapter extends XmlAdapter<String, Date> {
    private final List<SimpleDateFormat> knownPatterns = new ArrayList<SimpleDateFormat>();

    public DateAdapter() {
        this.knownPatterns.add(new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssXXX")); // This is the common supported format
        this.knownPatterns.add(new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ"));   // This is generated by JS
        this.knownPatterns.add(new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSXXX")); // This is generated by JS
        this.knownPatterns.add(new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'")); // This is generated by JS
    }


    @Override
    public String marshal(Date v) throws Exception {
        return this.knownPatterns.get(0).format(v);
    }

    @Override
    public Date unmarshal(String v) throws Exception {
        for (SimpleDateFormat pattern : knownPatterns) {
            try {
                return pattern.parse(v);
            } catch (ParseException pe) {
            }
        }
        throw new ParseException("Unsupported date format!", 0);
    }

}