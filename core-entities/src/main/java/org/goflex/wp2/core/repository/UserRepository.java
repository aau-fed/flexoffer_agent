/*
 * Created by bijay
 * GOFLEX :: WP2 :: foa-core
 * Copyright (c) 2018.
 *
 *  Permission is hereby granted, free of charge, to any person
 *  obtaining  a copy of this software and associated documentation
 *  files (the "Software") to deal in the Software without restriction,
 *  including without limitation the rights to use, copy, modify, merge,
 *  publish, distribute, sublicense, and/or sell copies of the Software,
 *  and to permit persons to whom the Software is furnished to do so,
 *  subject to the following conditions: The above copyright notice and
 *  this permission notice shall be included in all copies or substantial
 *  portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 *  OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON
 *  INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 *  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 *  OTHER DEALINGS IN THE SOFTWARE.
 *
 *  Last Modified 2/21/18 8:09 PM
 */

package org.goflex.wp2.core.repository;


import org.goflex.wp2.core.models.DeviceDetail;
import org.goflex.wp2.core.models.UserT;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import javax.transaction.Transactional;
import java.util.List;
import java.util.Set;

/**
 * Created by bijay on 12/2/17.
 */
@Repository
@Transactional
public interface UserRepository extends JpaRepository<UserT, Long> {
    /**
     * Find user by userID
     */
    UserT findByUserId(Long id);

    /**
     * Find All user in the memory/database
     */
    List<UserT> findAllByEnabled(boolean enabled);

    List<UserT> findAllByOrganizationId(long organizationId);

    List<UserT> findAllByOrganizationIdAndEnabled(long organizationId, boolean enabled);

    /**
     * Find count of all active user
     */
    @Query("SELECT count(u) FROM UserT u where u.enabled = 1 and organizationId=:organizationId")
    int findActiveUserCount(@Param("organizationId") Long organizationId);


    /**
     * Find count of all active user
     */
    @Query("SELECT count(u) FROM UserT u where u.enabled = 1 " +
            "and u.role = org.goflex.wp2.core.entities.UserRole.ROLE_PROSUMER " +
            "and organizationId=:organizationId")
    int findActiveProsumerCount(@Param("organizationId") Long organizationId);

    /**
     * Find All user in the memory/database with associated devices
     */
    @Query("SELECT u FROM UserT u join fetch u.deviceDetail")
    Set<UserT> findAllFetchDevice();

    /**
     * Find  user by Username
     */
    UserT findByUserName(String userName);

    UserT findByUserNameAndEnabled(String userName, boolean enabled);

    UserT findByEmail(String email);

    /**
     * Find  user by Username and Password
     */
    @Query("SELECT t FROM UserT t WHERE t.userName = :userName AND t.Password = :Password")
    UserT findByUserNameAndPassword(@Param("userName") String userName,
                                    @Param("Password") String password);

    /**
     * Find  user by tplinkuser name
     */
    //@Query("SELECT t FROM UserT t WHERE t.tpLinkUserName = :tpLinkUserName")
    UserT findByTpLinkUserName(String tpLinkUserName);


    @Query("SELECT t.userName FROM UserT t " +
            "WHERE t.organizationId = :organizationId")
    List<String> getAllUserName(@Param("organizationId") long organizationId);


    /**
     * Update device list for a user
     */
    @Modifying(clearAutomatically = true)
    @Query("update UserT u set u.deviceDetail = ?1 where u.userId = ?2")
    void updateDeviceList(Set<String> deviceDetail,
                          long userId);

    /**
     * find device by devicedetail id (id is autogenerated by system)
     */
    @Query("SELECT d FROM UserT t " +
            "inner join t.deviceDetail d " +
            "WHERE d.deviceDetailId = :deviceDetailId")
    DeviceDetail findByDeviceDetailDeviceDetailId(
            @Param("deviceDetailId") long deviceDetailId);

    /**
     * find device by device id (username@tplinkdeviceid)
     */
    @Query("SELECT d FROM UserT t " +
            "inner join t.deviceDetail d " +
            "WHERE d.deviceId = :deviceId")
    DeviceDetail findByDeviceDetailDeviceId(@Param("deviceId") String deviceId);

    /**
     * find device list for user
     */
    @Query("SELECT d FROM UserT t " +
            "inner join t.deviceDetail d " +
            "WHERE t.userName = :userName")
    List<DeviceDetail> findDeviceList(@Param("userName") String userName);

    /**
     * find device list for organizationId
     */
    @Query("SELECT d FROM UserT t " +
            "inner join t.deviceDetail d " +
            "WHERE t.organizationId = :organizationId")
           // "WHERE t.organizationId = :organizationId and d.deviceState <> 3")
    List<DeviceDetail> findByOrganizationId(@Param("organizationId") long organizationId);

    void deleteUserTByUserName(String userName);
}
